---
title: "Take-home_Ex02"
author: "LIANG YAO"
date: '4 June 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

# 1. Task and Questions:

### Objectives:

The country of Oceanus has sought FishEye International's help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye's analysts received import/export data for Oceanus' marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph. There are two main parts to this analysis.

First, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.

Second, FishEye has been using several tools, including artificial intelligence, to reason on the knowledge graph and suggest links that could extend the dataset. They have supplied 12 groups of link suggestions and need your help evaluating these groups to identify which tools are most reliable for completing the graph. FishEye is especially interested in identifying new temporal patterns or anomalies that are only present when new links are added.

### Questions:

1.  Use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.

2.  Evaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph? Limit your response to 600 words and 6 images.

3.  Illustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2. Limit your response to 300 words and 4 images.

4.  Identify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.

# 2. Load packages and data:

```{r}
pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, 
               tidyverse, graphlayouts, jsonlite,tidyr,heatmaply)
```

```{r}
mc2 <- jsonlite::fromJSON("data/mc2_challenge_graph.json")
```

# 3. Data checking/cleaning:

## 3.1 Find the nodes and edges:

```{r}
#view(mc2[["nodes"]])
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry) %>%
  distinct()
```

```{r}
#view(mc2[["links"]])
mc2_edges <- as_tibble(mc2$links) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, weightkg, hscode, arrivaldate, year) %>%
  drop_na() %>%
  distinct()

mc2_edges <-  mc2_edges %>%
  mutate(from = with(mc2_nodes, id[match(mc2_edges$source, id)]))%>%
  mutate(to = with(mc2_nodes, id[match(mc2_edges$target, id)])) %>%
  drop_na()
```

```{r}
glimpse(mc2_edges)
```

::: callout-note
### Note:

Here the 'arrivaldate' column of edges is treated as 'chr' datatype, would need to be changed to 'date' type. And a new column added to indicate years.
:::

## 3.2 Checking data distributions:

-   Distribution of shipments and weight(kg) by year:

```{r}
#| fig-width: 5
#| fig-height: 6
 
shipping <- mc2_edges %>%
         select(year, weightkg) %>%
         group_by(year) %>%
         summarise(count=n(),weightkg = sum(weightkg),kg_per_ship=weightkg/count)

d <- highlight_key(shipping)
p1 <- ggplot(data=d, 
            aes(x = year,
                y = count)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Count")

p2 <- ggplot(data=d, 
            aes(x = year,
                y = weightkg)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Weightkg")

p3 <- ggplot(data=d, 
            aes(x = year,
                y = kg_per_ship)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("average kg")

subplot(ggplotly(p1),
        ggplotly(p2),
        ggplotly(p3),
        shareX = TRUE,
        nrows = 3,
        titleY = TRUE)
```

::: callout-note
### Note:

Here we can conclude from the distribution of shipment by year that the weight per shipment of year 2032 is significantly higher than other years, indicating possible abnormal fishing volume in this year. For later using, I will focus on those hscode with most number of shipment during 2032.
:::

-   Check number of shipments and fishing weights in 2032 by hscode.

```{r}
hscode_count <-  mc2_edges %>%
  filter(year==2032) %>%
  select(hscode,weightkg) %>%
  group_by(hscode) %>%
  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%
  distinct() %>%
  arrange(desc(count))
hscode_count
```

# 4. Pattern Analysis & Visualization

## 4.1 Visualizing temporal patterns for individual entities by heatmap

### 4.1.1 Transforming the data frame into a matrix

```{r}
mc2_selected_id <- pull(mc2_edges %>% 
                                 select(source) %>% 
                                 group_by(source) %>%
                                 summarize(count=n()) %>%
                                 filter(count > 20000) %>%
                                 distinct() %>%
                                 rename(id=source), 
                               id)

mc2_selected_companies <- mc2_edges %>%
  filter(source == mc2_selected_id) %>%
  select(source,year,weightkg) %>%
  group_by(source,year) %>%
  summarize(kg_per_ship=sum(weightkg)/n()) %>%
  pivot_wider(names_from = year, values_from = kg_per_ship, values_fill = 0) 

row.names(mc2_selected_companies) <- mc2_selected_companies$source
companies_matrix <- data.matrix(mc2_selected_companies)
```

### 4.1.2 Building heatmap

```{r}
#| fig-width: 6
#| fig-height: 8

heatmaply(normalize(companies_matrix[, -c(1, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 6,
          fontsize_col = 6,
          main="Companies' change of fishing weights per shipment by year",
          xlab = "Year",
          ylab = "Companies"
          )
```

## 4.2 Visualizing networks

### 4.2.1 Preparing data:

-   Find hscode with most shipment in 2032, here I will pull out those hscode with more than 10K shipments in total.

```{r}
hscode_maj <- pull(select(hscode_count[hscode_count$count > 10000, ], hscode),hscode)
hscode_maj
```

-   Filtering edges by 2032 and set count as weights.

```{r}
mc2_edges_aggregated <- mc2_edges %>%
  filter(year == 2032) %>%
  group_by(source, target, hscode, from, to) %>%
  summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup()

glimpse(mc2_edges_aggregated)
```

### 4.2.2 Build network graph for hscode1:

-   Find edges of hscode1.

```{r}
mc2_edges_hscode1 <- mc2_edges_aggregated %>%
  filter(hscode == hscode_maj[1]) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  ungroup
```

-   Extract nodes.

```{r}
mc2_nodes_hscode1 <- rbind(mc2_edges_hscode1 %>%
                                select(from)%>%
                                rename(id=from),
                              mc2_edges_hscode1 %>%
                                select(to)%>%
                                rename(id=to)) %>% distinct()
```

-   Build network graph.

```{r}
mc2_graph_hscode1 <- tbl_graph(nodes = mc2_nodes_hscode1,
                       edges = mc2_edges_hscode1,
                       directed = TRUE)
```

```{r}
ggraph(mc2_graph_hscode1, 
            layout = "fr") +
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 2)) +
  geom_node_point(aes(), 
                  size = 0.8) + 
  theme_graph()
```

-   Build interactive network graph.

```{r}
visNetwork(mc2_nodes_hscode1,mc2_edges_hscode1) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

### 4.2.3 Build network graph for hscode2:

-   Find edges of hscode2.

```{r}
mc2_edges_hscode2 <- mc2_edges_aggregated %>%
  filter(hscode == hscode_maj[2]) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  ungroup
```

-   Extract nodes.

```{r}
mc2_nodes_hscode2 <- rbind(mc2_edges_hscode2 %>%
                                select(from)%>%
                                rename(id=from),
                          mc2_edges_hscode2 %>%
                                select(to)%>%
                                rename(id=to)) %>% distinct()
```

-   Build interactive network graph.

```{r}
visNetwork(mc2_nodes_hscode2,mc2_edges_hscode2) %>%
  visIgraphLayout(layout = "layout_with_kk") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

### 4.2.4 Build network graph for hscode3:

-   Find edges of hscode3.

```{r}
mc2_edges_hscode3 <- mc2_edges_aggregated %>%
  filter(hscode == hscode_maj[3]) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  ungroup
```

-   Extract nodes.

```{r}
mc2_nodes_hscode3 <- rbind(mc2_edges_hscode3 %>%
                                select(from)%>%
                                rename(id=from),
                          mc2_edges_hscode3 %>%
                                select(to)%>%
                                rename(id=to)) %>% distinct()
```

-   Build interactive network graph.

```{r}
visNetwork(mc2_nodes_hscode3,mc2_edges_hscode3) %>%
  visIgraphLayout(layout = "layout_with_kk") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

## 4.3 Evaluate the sets of predicted knowledge graph links FishEye has provided

### 4.3.1 Read provided json files:

Firstly read all 12 files provided by Fisheye into one table.

```{r}
files <- list.files(path = "data/bundles", full.names = TRUE)

fisheye_files <- lapply(files, fromJSON)
fisheyedata <- lapply(fisheye_files, function(json) {
  json$nodes
  json$links
})

fisheye <- bind_rows(fisheyedata)
```

```{r}
fisheye_edges <- as_tibble(fisheye) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, generated_by, hscode, arrivaldate, year,weightkg) %>%
  rename(group = generated_by) %>%
#  drop_na() %>%
  distinct()
```

Then check number of edges by year and by "generagted_by" (here I renamed this column as "group")

```{r}
fisheye_count <-  fisheye_edges %>%
  select(year,group,weightkg) %>%
  group_by(year,group) %>%
  summarise(count= n(),weightkg = sum(weightkg)) %>%
  arrange(year)

fisheye_count
```

### 4.3.2 Data wrangling for network graph:

```{r}
fisheye_edges_aggregated <- fisheye_edges %>%
  group_by(source, target, hscode, year, group) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup()
```

```{r}
fisheye_nodes_extracted <- rbind(fisheye_edges_aggregated %>%
  select(source,group) %>%
  rename(id = source), 
  fisheye_edges_aggregated %>%
  select(target,group) %>%
  rename(id = target)) %>%
  distinct()
```

### 4.3.3 Visualize graph provided by Fisheye:

```{r}
fisheye_graph <- tbl_graph(nodes = fisheye_nodes_extracted,
                       edges = fisheye_edges_aggregated,
                       directed = TRUE)
```

```{r}
set_graph_style() 

ggraph(fisheye_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(linewidth=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), size = 0.5) +
  theme(legend.position = 'bottom')+ 
  facet_nodes(~group)+
  th_foreground(foreground = "grey90",  
                border = TRUE)  
```

::: callout-caution
### Minding Here:

Here I will firstly choose those set of links with more nodes. The final choice can be made only after we saw the complementary effect after we add those links to original network.
:::

-   Build network graph for selected set of links:

```{r}
#| fig-width: 8
#| fig-height: 8

selected_links <- c('carp','catfish','chub_mackerel','herring','mackerel','pollock','salmon_wgl')

fisheye_selected_edges <- fisheye_edges_aggregated %>%
             filter(group == selected_links) %>%
             rename(from = source) %>%
             rename(to = target)

fisheye_selected_nodes <- rbind(fisheye_selected_edges %>%
                                select(from)%>%
                                rename(id=from),
                                fisheye_selected_edges %>%
                                select(to)%>%
                                rename(id=to)) %>% distinct()

visNetwork(fisheye_selected_nodes,
           fisheye_selected_edges) %>% 
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```
