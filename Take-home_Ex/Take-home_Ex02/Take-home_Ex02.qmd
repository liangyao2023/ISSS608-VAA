---
title: "Take-home_Ex02"
author: "LIANG YAO"
date: '4 June 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

# 1. Task and Questions:

### Objectives:

The country of Oceanus has sought FishEye International's help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye's analysts received import/export data for Oceanus' marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph. There are two main parts to this analysis.

First, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.

Second, FishEye has been using several tools, including artificial intelligence, to reason on the knowledge graph and suggest links that could extend the dataset. They have supplied 12 groups of link suggestions and need your help evaluating these groups to identify which tools are most reliable for completing the graph. FishEye is especially interested in identifying new temporal patterns or anomalies that are only present when new links are added.

### Questions:

1.  Use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.

2.  Evaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph? Limit your response to 600 words and 6 images.

3.  Illustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2. Limit your response to 300 words and 4 images.

4.  Identify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.

::: callout-note
### Note:

Only Question 1 would be explored in this Exercise.
:::

# 2. Load packages and data:

```{r}
pacman::p_load(igraph, ggraph, visNetwork, tidyverse, graphlayouts, jsonlite, heatmaply, tidygraph)
```

```{r}
mc2 <- jsonlite::fromJSON("data/mc2_challenge_graph.json")
```

# 3. Data checking/cleaning:

## 3.1 Find the nodes and edges:

```{r}
#view(mc2[["nodes"]])
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry) %>%
  distinct()
```

```{r}
#view(mc2[["links"]])
mc2_edges <- as_tibble(mc2$links) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, weightkg, hscode, arrivaldate, year) %>%
  drop_na() %>%
  distinct()

mc2_edges <-  mc2_edges %>%
  mutate(from = with(mc2_nodes, id[match(mc2_edges$source, id)]))%>%
  mutate(to = with(mc2_nodes, id[match(mc2_edges$target, id)])) %>%
  distinct()
```

```{r}
glimpse(mc2_edges)
```

::: callout-note
### Note:

Here the 'arrivaldate' column of edges is treated as 'chr' datatype, would need to be changed to 'date' type. And a new column added to indicate years.
:::

## 3.2 Checking data distributions:

-   Distribution of shipments and weight(kg) by year:

```{r}
#| fig-width: 4
#| fig-height: 6
 
shipping <- mc2_edges %>%
         select(year, weightkg) %>%
         group_by(year) %>%
         summarise(count=n(),weightkg = sum(weightkg),kg_per_ship=weightkg/count)

d <- highlight_key(shipping)
p1 <- ggplot(data=d, 
            aes(x = year,
                y = count)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Count")

p2 <- ggplot(data=d, 
            aes(x = year,
                y = weightkg)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Weightkg")

p3 <- ggplot(data=d, 
            aes(x = year,
                y = kg_per_ship)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("average kg")

subplot(ggplotly(p1),
        ggplotly(p2),
        ggplotly(p3),
        shareX = TRUE,
        nrows = 3,
        titleY = TRUE)
```

::: callout-note
### Note:

Here we can conclude from the distribution of shipment by year that the weight per shipment of year 2032 is significantly higher than other years, indicating possible abnormal fishing volume in this year. For later using, I will focus on those hscode with most number of shipment during 2032.
:::

-   Check number of shipments and fishing weights in 2032 by hscode.

```{r}
hscode_count <-  mc2_edges %>%
  filter(year==2032) %>%
  select(hscode,weightkg) %>%
  group_by(hscode) %>%
  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%
  distinct() %>%
  arrange(desc(count))
hscode_count

hscode_topcount <- pull(head(hscode_count, 1),hscode)
hscode_top_avekg <- pull(head(hscode_count%>%
                                filter(count>1000) %>%
                                arrange(desc(kg_per_ship)),1),hscode)

sprintf("hscode with highest number of shipment: %s", hscode_topcount)
sprintf("hscode with highest weight(kg) per shipment: %s", hscode_top_avekg)

```

# 4. Pattern Analysis & Visualization

## 4.1 Visualizing temporal patterns for individual entities by heatmap

### 4.1.1 Preparing data

Filter out those id with more than 20K count of shipements and transform the data table into matrix.

```{r}
mc2_selected_id <- pull(mc2_edges %>% 
                                 select(source) %>% 
                                 group_by(source) %>%
                                 summarize(count=n()) %>%
                                 filter(count > 20000) %>%
                                 distinct() %>%
                                 rename(id=source), 
                               id)

mc2_selected_companies <- mc2_edges %>%
  filter(source %in% mc2_selected_id) %>%
  select(source,year) %>%
  group_by(source,year) %>%
  summarize(shipment=n()) %>%
  pivot_wider(names_from = year, values_from = shipment, values_fill = 0) 

row.names(mc2_selected_companies) <- mc2_selected_companies$source
companies_matrix <- data.matrix(mc2_selected_companies)
```

### 4.1.2 Building heatmap

```{r}
#| fig-width: 6
#| fig-height: 8

heatmaply(normalize(companies_matrix[, -c(1, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 6,
          fontsize_col = 6,
          main="Companies' yearly trend of shipment counts",
          xlab = "Year",
          ylab = "Companies"
          )
```

::: callout-caution
### Please mind here:

There are several companies have abrupt change in number of shipment through years. This could indicating abnormal like change of identity or abnormal fishing activities.
:::

## 4.2 Visualizing networks

### 4.2.1 Preparing data:

-   Filtering edges by 2032 and set count as weights.

```{r}
mc2_edges_aggregated <- mc2_edges %>%
  filter(year == 2032) %>%
  group_by(source, target, hscode, from, to) %>%
  summarise(weights = n(), ave_kg = sum(weightkg)/weights) %>%
  filter(source!=target) %>%
  ungroup()

glimpse(mc2_edges_aggregated)
```

### 4.2.2 Build network graph for hscode with highest shipment counts:

-   Find edges of hscode equal to "306170".

```{r}
mc2_edges_topcount <- mc2_edges_aggregated %>%
  filter(hscode == hscode_topcount) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights>1) %>%
  ungroup
```

-   Extract nodes. Check source and target companies, categorize them into "fisher" (nodes in "from" column) or "wholesaler" (nodes in "to" column).

```{r}
mc2_nodes_topcount <- rbind(mc2_edges_topcount %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topcount %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()
```

-   Check any nodes been categorized into both "fisher" and "wholesaler", mutate their group by higher weights.

```{r}
lookup_topcount <- mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topcount%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topcount%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topcount <- mc2_nodes_topcount %>%
  left_join(lookup_topcount%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Check mutual-exclusiveness of category.

```{r}
mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n())%>%
  filter(count>1)
```

-   Build network graph.

```{r}
mc2_graph_topcount <- tbl_graph(nodes = mc2_nodes_topcount,
                       edges = mc2_edges_topcount,
                       directed = TRUE)
```

```{r}
mc2_graph_topcount %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 2)) +
  geom_node_point(aes(color=group, 
                  size = centrality_degree(mode = "out"))) + 
  theme_graph()
```

::: callout-notice
Here I used out-degree centrality as nodes' size to focus more on shippers.
:::

-   Check nodes with out-degree \>= 20, those fisher transit products to many different nodes, they may conduct unreported fishing and try to hide it in splitted transactions.

```{r}
mc2_graph_topcount %>%
    mutate(centrality_bet = centrality_degree(mode = "out")) %>%
    filter(centrality_bet>=20) %>%
    select(id,group) 
```

-   Since from the network graph above we can see that there are a lot of nodes in this network, here I will build interactive network graph with subset of data filtered by weights more than once a month(12).

```{r}
mc2_edges_topcount_sub <- mc2_edges_topcount %>%
  filter(weights>12)
```

```{r}
#categarize nodes into 2 groups and make sure the group label is mutual exclusive
mc2_nodes_topcount_sub <- rbind(mc2_edges_topcount_sub %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topcount_sub %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_topcount_sub <- mc2_nodes_topcount_sub %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topcount_sub%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topcount_sub%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topcount_sub <- mc2_nodes_topcount_sub %>%
  left_join(lookup_topcount_sub%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

```{r}
#build interactive network graph
visNetwork(mc2_nodes_topcount_sub,mc2_edges_topcount_sub) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Then let's checkout those edges with only 1 shipment during the year:

```{r}
mc2_edges_topcount_1time <- mc2_edges_aggregated %>%
  filter(hscode == hscode_topcount) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights==1) %>%
  ungroup
```

```{r}
#categarize nodes into 2 groups and make sure the group label is mutual exclusive
mc2_nodes_topcount_1time <- rbind(mc2_edges_topcount_1time %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topcount_1time %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_topcount_1time <- mc2_nodes_topcount_1time %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topcount_1time%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topcount_1time%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topcount_1time <- mc2_nodes_topcount_1time %>%
  left_join(lookup_topcount_1time%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

```{r}
#build interactive network graph
visNetwork(mc2_nodes_topcount_1time,mc2_edges_topcount_1time) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

::: callout-caution
### Please mind here:

Here from the graph of edges both with weights \>=12 and weights == 1, we can see a basic pattern of transitons is that they are directed from multiple fishers to single wholesaler.
:::

### 4.2.3 Build network graph for hscodes with highest weight(kg) per shipment:

-   Find edges of the hscodes.

```{r}
mc2_edges_topkg <- mc2_edges_aggregated %>%
  filter(hscode == hscode_top_avekg) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
#  filter(weights>1) %>%
  ungroup
```

-   Extract nodes. Check source and target companies, categorize them into "fisher" (nodes in "from" column) or "wholesaler" (nodes in "to" column).

```{r}
mc2_nodes_topkg <- rbind(mc2_edges_topkg %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topkg %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_topkg <- mc2_nodes_topkg %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topkg%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topkg%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topkg <- mc2_nodes_topkg %>%
  left_join(lookup_topkg%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Check mutual-exclusiveness of category.

```{r}
mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n())%>%
  filter(count>1)
```

-   Build interactive network graph.

```{r}
visNetwork(mc2_nodes_topkg,mc2_edges_topkg) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

::: callout-caution
### Please mind here:

Here we find the transition pattern is more of directed from one fisher to multiple wholesaler, this may due to the average weight(kg) of the product if relatively higher, so different parts of fish need to sale to different dealers.
:::
