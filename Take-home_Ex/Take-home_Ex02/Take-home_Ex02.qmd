---
title: "Take-home_Ex02"
author: "LIANG YAO"
date: '27 May 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

## 1. Task and Questions:

### Objectives:

The country of Oceanus has sought FishEye International's help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye's analysts received import/export data for Oceanus' marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph. There are two main parts to this analysis.

First, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.

Second, FishEye has been using several tools, including artificial intelligence, to reason on the knowledge graph and suggest links that could extend the dataset. They have supplied 12 groups of link suggestions and need your help evaluating these groups to identify which tools are most reliable for completing the graph. FishEye is especially interested in identifying new temporal patterns or anomalies that are only present when new links are added.

### Questions:

1.  Use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.

2.  Evaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph? Limit your response to 600 words and 6 images.

3.  Illustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2. Limit your response to 300 words and 4 images.

4.  Identify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.

## 2. Load packages and data:

```{r}
pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, 
               tidyverse, graphlayouts, jsonlite)
```

```{r}
mc2 <- jsonlite::fromJSON("data/mc2_challenge_graph.json")
```

## 3. Data checking/cleaning:

### 3.1 Find the nodes and edges:

```{r}
#view(mc2[["nodes"]])
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry)
```

```{r}
#view(mc2[["links"]])
mc2_edges <- as_tibble(mc2$links) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, weightkg, hscode, arrivaldate, year, volumeteu, valueofgoods_omu, valueofgoodsusd) %>%
  distinct()
```

```{r}
glimpse(mc2_edges)
```

### 3.2 Data wranggling

### 3.2.1 Check and deal with NA:

-   Create a numeric ID for nodes and change original id column name to "label".

```{=html}
<!-- -->
```
-   Deal with NA and check data type in edges.

```{r}
#mc2_link <- select(mc2_edges %>% 
#                     drop_na(valueofgoodsusd) %>%
#                     mutate(arrivaldate = ymd(arrivaldate)) %>%
#                     mutate(Weekday = wday(arrivaldate,
#                        label = TRUE))
#                   , -valueofgoods_omu)
#glimpse(mc2_link)
```

::: callout-note
### Notes

Here I dropped any NA in nodes and any NA in 'valueofgoodsusd' column of edges. I also dropped the 'valueofgood_omu' column since there were too many NA rows.

And the 'arrivaldate' column of edges is treated as 'chr' datatype, would need to be changed to 'date' type.
:::

-   Match nodes' numeric id to source and target in edges and change original column names to "source_label" & "target_label.

```{r}
#colnames(mc2_link)[1] <- "source_label"
#colnames(mc2_link)[2] <- "target_label"
#mc2_link$source <- with(mc2_nodes, id[match(mc2_link$source_label, label)])
#mc2_link$target <- with(mc2_nodes, id[match(mc2_link$target_label, label)])
#glimpse(mc2_link)
```

### 3.2.3 Wrangling attributes:

-   Find hscode with most edges:

    ```{r}
    hscode_count <-  mc2_edges %>%
      select(hscode) %>%
      group_by(hscode) %>%
      summarise(count = n()) %>%
      distinct() %>%
      arrange(desc(count))

    hscode_select <- pull(select(hscode_count[hscode_count$count > 50000, ], hscode),hscode)
    hscode_select
    ```

```{=html}
<!-- -->
```
-   Distribution of edges by years:

    ```{r}
    #| fig-width: 4
    #| fig-height: 4

    ggplot(data = mc2_edges, aes(x=year)) +
      geom_histogram(bins = 7, binwidth = 0.5) +
      xlab("Year")
    ```

# 4. Analysis & Visualization

## 4.1 Visualizing original links

### 4.1.1 Build a network graph of those selected hscodes:

```{r}
mc2_edges_aggregated <- mc2_edges %>%
  filter(hscode == hscode_select) %>%
  group_by(source, target, hscode, year) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  filter(weights > 20) %>%
  ungroup()
```

```{r}
id1 <- mc2_edges_aggregated %>%
  select(source,hscode) %>%
  rename(id = source)
id2 <- mc2_edges_aggregated %>%
  select(target,hscode) %>%
  rename(id = target)
mc2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

```{r}
mc2_graph <- tbl_graph(nodes = mc2_nodes_extracted,
                       edges = mc2_edges_aggregated,
                       directed = TRUE)
```

```{r}
#| fig-width: 6
#| fig-height: 6

g <- ggraph(mc2_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 2)) +
  geom_node_point(aes(colour = hscode), 
                  size = 1)

g + theme_graph()
```

Build a facet graph by years to see the change of network in different years:

```{r}
#| fig-width: 8
#| fig-height: 10

set_graph_style() 

g <- ggraph(mc2_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(color = hscode), size = 0.5) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~year)+
  th_foreground(foreground = "grey80",  
                border = TRUE)  
```

Build a facet_nodes graph by hscode to see the difference:

```{r}
#| fig-width: 8
#| fig-height: 10

set_graph_style()

g <- ggraph(mc2_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), 
                  size = 0.5)
  
g + facet_nodes(~hscode)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### 4.1.2 Find communities

```{r}
#| fig-width: 6
#| fig-height: 6

g <- mc2_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = weights, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

```{r}


```

## 4.2 Finding pattern

### 4.2.1 new patterns

Prepare data for interactive network graph.

```{r}
mc2_edges_aggregated$from <- with(mc2_nodes, id[match(mc2_edges_aggregated$source, id)])
mc2_edges_aggregated$to <- with(mc2_nodes, id[match(mc2_edges_aggregated$target, id)])

mc2_edges_aggregated2 <- mc2_edges_aggregated %>%
  group_by(from, to) %>%
  summarise(weights = n()) %>%
  filter(from!=to) %>%
  filter(weights > 1) %>%
  ungroup
```

```{r}
visNetwork(mc2_nodes_extracted %>%
             select(id)%>%
             distinct(),
           mc2_edges_aggregated2) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### 4.2.2 Visualizing

Monthly income distributing quite evenly over different household size and joviality level.

```{r}

```

# 5. Evaluate the sets of predicted knowledge graph links FishEye has provided

## 5.1 Read provided json files:

```{r}
files <- c("data/bundles/carp.json", 
           "data/bundles/catfish.json", 
           "data/bundles/chub_mackerel.json",
           "data/bundles/cod2.json",
           "data/bundles/herring.json",
           "data/bundles/lichen.json",
           "data/bundles/mackerel.json",
           "data/bundles/pollock.json",
           "data/bundles/salmon_wgl.json",
           "data/bundles/salmon.json",
           "data/bundles/shark.json",
           "data/bundles/tuna.json")

fisheye <- do.call("rbind", lapply(files, fromJSON))
```

```{r}

```

```{r}

```
