---
title: "Take-home_Ex02"
author: "LIANG YAO"
date: '27 May 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

# 1. Task and Questions:

### Objectives:

The country of Oceanus has sought FishEye International's help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye's analysts received import/export data for Oceanus' marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph. There are two main parts to this analysis.

First, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.

Second, FishEye has been using several tools, including artificial intelligence, to reason on the knowledge graph and suggest links that could extend the dataset. They have supplied 12 groups of link suggestions and need your help evaluating these groups to identify which tools are most reliable for completing the graph. FishEye is especially interested in identifying new temporal patterns or anomalies that are only present when new links are added.

### Questions:

1.  Use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.

2.  Evaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph? Limit your response to 600 words and 6 images.

3.  Illustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2. Limit your response to 300 words and 4 images.

4.  Identify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.

# 2. Load packages and data:

```{r}
pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, 
               tidyverse, graphlayouts, jsonlite,tidyr,heatmaply)
```

```{r}
mc2 <- jsonlite::fromJSON("data/mc2_challenge_graph.json")
```

# 3. Data checking/cleaning:

## 3.1 Find the nodes and edges:

```{r}
#view(mc2[["nodes"]])
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry)
```

```{r}
#view(mc2[["links"]])
mc2_edges <- as_tibble(mc2$links) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, weightkg, hscode, arrivaldate, year, volumeteu, valueofgoods_omu, valueofgoodsusd) %>%
  distinct()
```

```{r}
glimpse(mc2_edges)
```

::: callout-note
### Note:

Here the 'arrivaldate' column of edges is treated as 'chr' datatype, would need to be changed to 'date' type. And a new column added to indicate years.
:::

## 3.2 Wrangling attributes:

-   Find hscode with most edges and hscode with most weightkg of fishing:

    ```{r}
    hscode_count <-  mc2_edges %>%
      select(hscode,weightkg) %>%
      group_by(hscode) %>%
      summarise(weightkg = sum(weightkg), count=n()) %>%
      distinct() %>%
      arrange(desc(weightkg))

    hscode_maj <- pull(select(hscode_count[hscode_count$count > 50000, ], hscode),hscode)
    hscode_maj

    hscode_heavy <- pull(select(hscode_count[hscode_count$weightkg > 3000000000, ],hscode),hscode)
    hscode_heavy
    ```

-   Distribution of edges by years:

    ```{r}
    #| fig-width: 6
    #| fig-height: 3

    ggplot(data = mc2_edges, aes(x=year)) +
      geom_histogram(bins = 7, binwidth = 0.5) +
      ggtitle("Totaol edges weights by years") +
      xlab("Year")
    ```

# 4. Pattern Analysis & Visualization

## 4.1 Visualizing temporal patterns for individual entities by heatmap

### 4.1.1 Transforming the data frame into a matrix

Find edges filtering by those majority hscodes.

```{r}
mc2_edges_aggregated <- mc2_edges %>%
  filter(hscode == hscode_heavy) %>%
  group_by(source, target, hscode, year) %>%
    summarise(weights = sum(weightkg)) %>%
  filter(source!=target) %>%
  filter(weights > 1000000) %>%
  ungroup()
```

```{r}
mc2_selected_companies <- mc2_edges_aggregated %>%
  select(source,year,weights) %>%
  group_by(source, year) %>%
  summarize(weights = sum(weights)) %>%
  pivot_wider(names_from = year, values_from = weights, values_fill = 0) 

row.names(mc2_selected_companies) <- mc2_selected_companies$source
companies_matrix <- data.matrix(mc2_selected_companies)
```

### 4.1.2 Building heatmap

```{r}
#| fig-width: 6
#| fig-height: 8

heatmaply(normalize(companies_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 6,
          fontsize_col = 6,
          main="Companies' change of fishing weights by years",
          xlab = "Years",
          ylab = "Companies"
          )
```

## 4.2 Visualizing links between companies

### 4.2.1 Build a network graph of those selected hscodes with most fishing weight:

-   Prepare the data

```{r}
id1 <- mc2_edges_aggregated %>%
  select(source,hscode) %>%
  rename(id = source)
id2 <- mc2_edges_aggregated %>%
  select(target,hscode) %>%
  rename(id = target)
mc2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

```{r}
mc2_graph <- tbl_graph(nodes = mc2_nodes_extracted,
                       edges = mc2_edges_aggregated,
                       directed = TRUE)
```

-   Basic network graph to see the whole picture.

```{r}
#| fig-width: 7
#| fig-height: 5

g <- ggraph(mc2_graph, 
            layout = "nicely") +
  geom_edge_link(aes(linewidth=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 2)) +
  geom_node_point(aes(colour = hscode), 
                  size = 1)

g + theme_graph()
```

-   Build a facet graph by years to see the change of network in different years:

```{r}
#| fig-width: 8
#| fig-height: 8

set_graph_style() 

g <- ggraph(mc2_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(linewidth=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(color = hscode), size = 0.5) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~year)+
  th_foreground(foreground = "grey90",  
                border = TRUE)  
```

-   Build a facet network graph by hscode:

```{r}
#| fig-width: 8
#| fig-height: 8

set_graph_style() 

g <- ggraph(mc2_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(linewidth=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(color = hscode), size = 0.5) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~hscode)+
  th_foreground(foreground = "grey90",  
                border = TRUE)  
```

-   Build a facet_nodes graph by hscode to see the difference:

```{r}
#| fig-width: 8
#| fig-height: 8

set_graph_style()

g <- ggraph(mc2_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), 
                  size = 0.5)
  
g + facet_nodes(~hscode)+
  th_foreground(foreground = "grey90",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### 4.2.2 Find communities

```{r}
#| fig-width: 10
#| fig-height: 6

g <- mc2_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = weights, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

### 4.2.3 Build interactive network graph.

Prepare data for interactive network graph.

```{r}
mc2_edges_aggregated$from <- with(mc2_nodes, id[match(mc2_edges_aggregated$source, id)])
mc2_edges_aggregated$to <- with(mc2_nodes, id[match(mc2_edges_aggregated$target, id)])

mc2_edges_aggregated2 <- mc2_edges_aggregated %>%
  group_by(from, to) %>%
  summarise(weights = n()) %>%
  filter(from!=to) %>%
  filter(weights > 1) %>%
  ungroup
```

Build an interactive network graph for checking the position of each node.

```{r}
visNetwork(mc2_nodes_extracted %>%
             select(id)%>%
             distinct(),
           mc2_edges_aggregated2) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 4.3 Evaluate the sets of predicted knowledge graph links FishEye has provided

### 4.3.1 Read provided json files:

Firstly read all 12 files provided by Fisheye into one table.

```{r}
files <- list.files(path = "data/bundles", full.names = TRUE)

fisheye_files <- lapply(files, fromJSON)
fisheyedata <- lapply(fisheye_files, function(json) {
  json$nodes
  json$links
})
```

```{r}
fisheye <- bind_rows(fisheyedata)
```

```{r}
fisheye_edges <- as_tibble(fisheye) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, generated_by, hscode, arrivaldate, year,weightkg) %>%
  rename(group = generated_by) %>%
  distinct()
```

Then check number of edges by "hscode" and by "generagted_by" (here I renamed this column as "group")

```{r}
fisheye_hscode_count <-  fisheye_edges %>%
  select(hscode,group,weightkg) %>%
  group_by(hscode,group) %>%
  summarise(count= n(),weightkg = sum(weightkg)) %>%
  arrange(desc(weightkg))

fisheye_hscode_count
```

### 4.3.2 Data wrangling for network graph:

```{r}
fisheye_edges_aggregated <- fisheye_edges %>%
  group_by(source, target, hscode, year, group) %>%
    summarise(weightkg = sum(weightkg)) %>%
  filter(source!=target) %>%
  filter(weightkg > 10000) %>%
  ungroup()
```

```{r}
ids <- fisheye_edges_aggregated %>%
  select(source,group) %>%
  rename(id = source)
idt <- fisheye_edges_aggregated %>%
  select(target,group) %>%
  rename(id = target)
fisheye_nodes_extracted <- rbind(ids, idt) %>%
  distinct()
```

### 4.3.3 Visualize graph provided by Fisheye:

```{r}
fisheye_graph <- tbl_graph(nodes = fisheye_nodes_extracted,
                       edges = fisheye_edges_aggregated,
                       directed = TRUE)
```

-   Facet node graph by groups:

```{r}
#| fig-width: 8
#| fig-height: 8

set_graph_style()

g <- ggraph(fisheye_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=weightkg), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), 
                  size = 0.5)
  
g + facet_nodes(~group)+
  th_foreground(foreground = "grey90",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

-   Facet network graph by groups:

```{r}
#| fig-width: 8
#| fig-height: 8

set_graph_style() 

g <- ggraph(fisheye_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(linewidth=weightkg), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(color = group), size = 0.5) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~group)+
  th_foreground(foreground = "grey90",  
                border = TRUE)  
```

::: callout-caution
### Conclusion:

Here I will select "carp" group as the new set of links to add into mc2 graph, since from the facet nodes graph I can see this set of link got most and sparsest of nodes, indicating this set should be able to contribute the most to the original graph. At the same time, the facet network graph show not much difference between groups.
:::

# 5. Pattern Analysis After Adding new links
